Day-7
======

Problem Solve Profit and Max:
-----------------------------
class Main {
    public static void main(String[] args) {
         int[] arr = {7,1,5,3,6,4};
        int min = arr[0];
        int max = 0;
        int n = arr.length;
        
        for(int i =0 ;i <n;i++){
            int profit = arr[i] - min;
            max = Math.max(max,profit);
            min = Math.min(min,arr[i]);
        }
        System.out.println(max);
     }
}


int[] Values = {7,1,5,3,6,4};
leaders = {7,6,4};

code for leader Element.
-----------------------
class Main {
    public static void main(String[] args) {
         int[] arr = {7,1,5,3,6,4};
        boolean  check = false;
        for(int i=0;i<arr.length;i++){
            check = false;
            for(int j=i;j<arr.length;j++){
                if(arr[i]<arr[j]){
                    check = true;
                }
            }
            if(!check){
                System.out.print(arr[i]+" ");
            }
        }
     }
}


import java.util.*;
class Main {
    public static void main(String[] args) {
        int[] arr = {7,1,5,3,6,4};
       int max = Integer.MIN_VALUE;
       for(int i=arr.length-1;i>=0;i--){
           if(arr[i] > max){
               System.out.print(arr[i]+" ");
               max= arr[i];
           }
       }
       
     }
}


* Maximun Sum of SubArray * 
----------------------------

import java.util.*;
class Main {
    public static void main(String[] args) {
        int[] arr = {-2,1,-3,4,-1,2,1,-5,4};
        int sum = 0;
        int max_sum = Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            sum += arr[i];
            if(sum>max_sum){
                max_sum = sum;
            }
            if(sum<0){
                sum=0;
            }
        }
        System.out.println(max_sum);
        
     }
}
 
it is a kadams Algorithm.

import java.util.*;
class Main {
    public static void main(String[] args) {
        int[] arr = {7,1,5,3,6,4};
        ArrayList<Integer> leaders = new ArrayList<>();
       int max = Integer.MIN_VALUE;
       for(int i=arr.length-1;i>=0;i--){
           if(arr[i] > max){
               System.out.print(arr[i]+" ");
               leaders.add(arr[i]);
               max= arr[i];
           }
       }
       System.out.println(leaders);
     }
}

* ArrayList *
==============

- Array haiving Fixed Size, So once we declear we can't change      the size , either increase or decrease.
- to increase array size dynamically we have to use ArrayList.
- it's belongs to collection Framework.
what is a Framework
-------------------
framework is nothing but pre-defiend Methods and will guide the program.

Syntex :
  	List<Wraper class> ArrayListName = new ArrayList<>();
example :

        ArrayList<Integer> leaders = new ArrayList<>(); 
				or
        ArrayList<Integer> leaders = new ArrayList<Integer>();

List is an Interface, and Interface Contains Incomplete methods.
- wraper class is not a primitive datatype it's a class that's   it.
- And in collections we have to use wraper classes only.
- <><> is called Generics(<>);
- new ArrayList<>() this ArrayList Is a  class and it contains  Complete Methods..


ArrayList is a dynamic array.
if my array size is 2 if i am a trying to add third elemenet the size will be doubled.
and it will copy previous elements vice-versa, the array will become half.
As ArrayList Is a class, you have to import the ArrayList Class
now we can access all the predefined methods, which consistes ArrayList.


using ArrayList

import java.util.*;
class Main {
    public static void main(String[] args) {
        int[] arr = {7,1,5,3,6,4};
        ArrayList<Integer> leaders = new ArrayList<>();
       int max = Integer.MIN_VALUE;
       for(int i=arr.length-1;i>=0;i--){
           if(arr[i] > max){
               System.out.print(arr[i]+" ");
               leaders.add(arr[i]);
               max= arr[i];
           }
       }
       System.out.println(leaders);
     }
}


* SubArrays *
==============

SubArray is a Some part of array  might be single elements also it should be continues .......


